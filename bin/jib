# @describe Jib helps the crane hoist the cargo.
# @version 0.1.1

createOptions() {
  options=(
    --broadcast
    --rpc-url $1
    --optimize
    --optimizer-runs $2
    -vvvv
  )
  if [[ $1 != "http://localhost:8545" ]]; then
    # require block explorer api key if using a remote network
    if [[ -z $3 ]]; then
      echo "Error: block explorer api key is required for remote networks"
      exit 1
    fi
    options+=(--verify)
    options+=(--etherscan-api-key $3)
  fi
  echo ${options[@]}
}

# @cmd deploy a proxy admin contract
# @alias dpa
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployProxyAdmin() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Deploy.s.sol:DeployScript \
    ${options[@]} --sig "deployProxyAdmin()"

}

# @cmd deploy a governance token implementation contract
# @alias dgi
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovTokenImpl() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Deploy.s.sol:DeployScript \
    ${options[@]} --sig "deployGovernanceTokenImpl()"
}

# @cmd deploy a membership token implementation contract
# @alias dmi
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployMemTokenImpl() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 17500 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Deploy.s.sol:DeployScript \
    ${options[@]} --sig "deployMembershipTokenImpl()"
}

# @cmd deploy an instance of the governance token
# @alias dgt
# @arg proxy-admin! the address of the proxy admin contract
# @arg implementation! the address of the implementation contract
# @arg contract-admin! the address entitled to call admin functions
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -c --supply-cap! the maximum supply of the token
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovToken() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Deploy.s.sol:DeployScript $argc_proxy_admin $argc_implementation \
    $argc_contract_admin "$argc_name" $argc_symbol $argc_supply_cap \
    ${options[@]} --sig "deployGovernanceToken(address,address,address,string,string,uint256)"
}

# @cmd deploy an instance of the membership token
# @alias dmt
# @arg proxy-admin! the address of the proxy admin contract
# @arg implementation! the address of the implementation contract
# @arg contract-admin! the address entitled to call admin functions
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -u --base-uri! the base uri for the token metadata
# @option --private-key!
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=POLYGONSCAN_API_KEY the api key for the block explorer
deployMemToken() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Deploy.s.sol:DeployScript $argc_proxy_admin $argc_implementation \
    $argc_contract_admin "$argc_name" $argc_symbol $argc_base_uri \
    ${options[@]} --sig "deployMembershipToken(address,address,address,string,string,string)"
}

# @cmd upgrade a governance token
# @alias ugt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @arg implementation! the address of the implementation to upgrade to
# @option -p --private-key!
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeGovToken() {
  PRIVATE_KEY=$argc_private_key forge script \
    script/Upgrade.s.sol:UpgradeScript $argc_proxy_admin \
    $argc_transparent_proxy $argc_implementation \
    --sig "upgradeGovernanceToken(address,address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd upgrade a membership token
# @alias umt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @arg implementation! the address of the implementation to upgrade to
# @option -p --private-key!
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeMemToken() {
  PRIVATE_KEY=$argc_private_key forge script \
    script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy $argc_implementation \
    --sig "upgradeMembershipToken(address,address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd deploy and upgrade a membership token
# @alias dumt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployAndUpgradeMemToken() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy \
    ${options[@]} --sig "deployAndUpgradeMembershipToken(address,address)"
}

# @cmd deploy and upgrade a governance token
# @alias dugt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployAndUpgradeGovToken() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Upgrade.s.sol:UpgradeScript $argc_proxy_admin $argc_transparent_proxy \
    ${options[@]} --sig "deployAndUpgradeGovernanceToken(address,address)"
}

# @cmd output test coverage data for the contracts
# @alias cov
# @flag --no-open do not open the coverage report in the browser
coverage() {
  forge coverage --report lcov
  lcov -r lcov.info "test/*" \
    -r lcov.info "script/*" "src/governor/lib/*" "src/utils/*" \
    -o lcov-filtered.info
  genhtml -o coverage/ lcov-filtered.info
  rm lcov.info lcov-filtered.info
  [ $argc_no_open ] || open coverage/index.html
}

# @cmd check storage layout against the last storage layout
# @alias check-storage
# @arg contract-name![OrigamiGovernanceToken|OrigamiMembershipToken] the name of the contract to check
checkStorage() {
  FILE_BASE=".storage-layout/.$argc_contract_name"
  forge inspect --pretty $argc_contract_name storage-layout >"$FILE_BASE.new"
  if [ -f "$FILE_BASE.old" ]; then
    diff -a --suppress-common-lines "$FILE_BASE.old" "$FILE_BASE.new"
  else
    echo "No previous storage layout found"
  fi
}

# @cmd grant mint/revoke permissions to wallets
# @alias grant-permissions
# @arg contract! the address of the token contract
# @arg file! the path to the file containing the addresses to grant permissions to (one per line)
# @option -p --private-key!
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --gas-price Override the gas price to use for the transaction.
grantPermissions() {
  ADDRESS_ARRAY=$(awk 'BEGIN { printf "[" } { if (NR == 1) printf "%s", $0; else printf ",%s", $0; } END { printf "]" }' $argc_file)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Util.s.sol:GrantPermissions \
    $argc_contract $ADDRESS_ARRAY \
    --sig "run(address,address[])" \
    --rpc-url $argc_rpc_url --broadcast -vvvv \
    --gas-price "${argc_gas_price:-0}"
}

# @cmd check for mint/revoke permissions for wallets
# @alias check-permissions
# @arg contract! the address of the token contract
# @arg file! the path to the file containing the addresses to check permissions for (one per line)
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --verbose print the addresses that have the permissions
checkPermissions() {
  REVOKER_ROLE="0xce3f34913921da558f105cefb578d87278debbbd073a8d552b5de0d168deee30"
  MINTER_ROLE="0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"
  FALSE="0x0000000000000000000000000000000000000000000000000000000000000000"

  while read -r address; do
    local REVOKER="$(cast call --rpc-url $argc_rpc_url $argc_contract "hasRole(bytes32,address)" $REVOKER_ROLE $address)"
    if [ $REVOKER = $FALSE ]; then
      echo "$address does not have the revoker role"
    elif [ $argc_verbose ]; then
      echo "$address has the revoker role"
    fi

    local MINTER="$(cast call --rpc-url $argc_rpc_url $argc_contract "hasRole(bytes32,address)" $MINTER_ROLE $address)"
    if [ $MINTER = $FALSE ]; then
      echo "$address does not have the minter role"
    elif [ $argc_verbose ]; then
      echo "$address has the minter role"
    fi
  done <$argc_file
}

# @cmd check balances of wallets
# @alias check-balances
# @arg file! the path to the file containing the addresses to check balances for (one per line)
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
checkBalances() {
  while read -r address; do
    local BALANCE="$(cast balance --rpc-url $argc_rpc_url $address)"
    echo "$address has a balance of $BALANCE"
  done <$argc_file
}

# @cmd deploy all current governor diamond facets
# @alias deploy-facets
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --ignore-deploy-warning ignore the warning about deploying all facets
deployFacets() {
  if [ $argc_ignore_deploy_warning ]; then
    declare -a options=()
    options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
    PRIVATE_KEY=$argc_private_key forge script \
      script/Governor.s.sol:DeployGovernorFacets \
      ${options[@]}
  else
    echo
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo "!!   WARNING: This will deploy all Governor Diamond Facets   !!"
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo
    echo " Unless this is the first deploy to a given chain, you probably"
    echo " don't want to do this. Facets are shared across all governor"
    echo " diamonds, so you almost never want to deploy _all_ of them."
    echo " If you are sure you want to deploy them, re-run this command"
    echo " with the --ignore-deploy-warning flag."
    echo
  fi
}

# @cmd deploy the governor diamond init contract
# @alias dgdi,deploy-governor-diamond-init
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovernorDiamondInit() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Governor.s.sol:DeployGovernorDiamondInit \
    ${options[@]}
}

# @cmd deploy a governor diamond contract
# @alias dgd,deploy-governor-diamond
# @arg admin! the address of the admin
# @arg diamond-cut-facet! the address of the diamond cut facet
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovernorDiamond() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Governor.s.sol:DeployGovernorDiamond \
    $argc_admin $argc_diamond_cut_facet \
    ${options[@]} --sig "run(address,address)"
}

# @cmd deploy a governor timelock controller
# @alias dgtc,deploy-governor-timelock-controller
# @arg governor-diamond! the address of the governor diamond
# @arg timelock-delay the initial delay for the timelock, in seconds
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovernorTimelockController() {
  declare -a options=()
  options=$(createOptions $argc_rpc_url 1000000 $argc_block_explorer_api_key)
  PRIVATE_KEY=$argc_private_key forge script \
    script/Governor.s.sol:DeployGovernorTimelockController \
    $argc_governor_diamond $argc_timelock_delay \
    ${options[@]} --sig "run(address,uint256)"
}

# @cmd apply local configuration to deployed governor and timelock instances
# @alias cg,configure-governor
# @arg init! the address of the governor diamond init
# @arg diamond! the address of the governor diamond
# @arg timelock! the address of the timelock controller
# @arg path! the path to the governor diamond config
# @option -p --private-key!
# @option -b --block-explorer-api-key the api key for the block explorer
# @option -f --rpc-url=http://localhost:8545 The url of the RPC endpoint.
configureGovernor() {
  PRIVATE_KEY=$argc_private_key forge script \
    script/Governor.s.sol:GovernorInstance \
    $argc_init $argc_diamond $argc_timelock $argc_path \
    --sig "configure(address,address,address,string)" \
    --rpc-url $argc_rpc_url --broadcast
}

eval $(argc "$0" "$@")
