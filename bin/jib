# @describe Jib helps the crane hoist the cargo.
# @version 0.1.1

# @cmd deploy a proxy admin contract
# @alias dpa
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployProxyAdmin() {
  forge script script/Deploy.s.sol:DeployScript \
    --sig "deployProxyAdmin()" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd deploy a governance token implementation contract
# @alias dgi
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=ETHERSCAN_API_KEY the api key for the block explorer
deployGovTokenImpl() {
  forge script script/Deploy.s.sol:DeployScript \
    --sig "deployGovernanceTokenImpl()" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 1000000
}

# @cmd deploy a membership token implementation contract
# @alias dmi
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=ETHERSCAN_API_KEY the api key for the block explorer
deployMemTokenImpl() {
  forge script script/Deploy.s.sol:DeployScript \
    --sig "deployMembershipTokenImpl()" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 17500
}

# @cmd deploy an instance of the governance token
# @alias dgt
# @arg proxy-admin! the address of the proxy admin contract
# @arg implementation! the address of the implementation contract
# @arg contract-admin! the address entitled to call admin functions
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -c --supply-cap! the maximum supply of the token
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=ETHERSCAN_API_KEY the api key for the block explorer
deployGovToken() {
  forge script script/Deploy.s.sol:DeployScript \
    $argc_proxy_admin $argc_implementation $argc_contract_admin \
    "$argc_name" $argc_symbol $argc_supply_cap \
    --sig "deployGovernanceToken(address,address,address,string,string,uint256)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 1000000

}

# @cmd deploy an instance of the membership token
# @alias dmt
# @arg proxy-admin! the address of the proxy admin contract
# @arg implementation! the address of the implementation contract
# @arg contract-admin! the address entitled to call admin functions
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -u --base-uri! the base uri for the token metadata
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=POLYGONSCAN_API_KEY the api key for the block explorer
deployMemToken() {
  forge script script/Deploy.s.sol:DeployScript \
    $argc_proxy_admin $argc_implementation $argc_contract_admin \
    "$argc_name" $argc_symbol $argc_base_uri \
    --sig "deployMembershipToken(address,address,address,string,string,string)" \
    --rpc-url $argc_rpc_url --verify --broadcast -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 17500
}

# @cmd upgrade a governance token
# @alias ugt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @arg implementation! the address of the implementation to upgrade to
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeGovToken() {
  forge script script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy $argc_implementation \
    --sig "upgradeGovernanceToken(address,address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd upgrade a membership token
# @alias umt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @arg implementation! the address of the implementation to upgrade to
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeMemToken() {
  forge script script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy $argc_implementation \
    --sig "upgradeMembershipToken(address,address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd deploy and upgrade a membership token
# @alias dumt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=POLYGONSCAN_API_KEY the api key for the block explorer
deployAndUpgradeMemToken() {
  forge script script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy \
    --sig "deployAndUpgradeMembershipToken(address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 17500
}

# @cmd deploy and upgrade a governance token
# @alias dugt
# @arg proxy-admin! the address of the proxy admin
# @arg transparent-proxy! the address of the transparent proxy to upgrade
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @option --block-explorer-api-key=ETHERSCAN_API_KEY the api key for the block explorer
deployAndUpgradeGovToken() {
  forge script script/Upgrade.s.sol:UpgradeScript \
    $argc_proxy_admin $argc_transparent_proxy \
    --sig "deployAndUpgradeGovernanceToken(address,address)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --etherscan-api-key "${!argc_block_explorer_api_key}" \
    --optimize --optimizer-runs 1000000
}

# @cmd check storage layout against the last storage layout
# @alias check-storage
# @arg contract-name![OrigamiGovernanceToken|OrigamiMembershipToken] the name of the contract to check
checkStorage() {
  FILE_BASE=".storage-layout/.$argc_contract_name"
  forge inspect --pretty $argc_contract_name storage-layout >"$FILE_BASE.new"
  if [ -f "$FILE_BASE.old" ]; then
    diff -a --suppress-common-lines "$FILE_BASE.old" "$FILE_BASE.new"
  else
    echo "No previous storage layout found"
  fi
}

# @cmd grant mint/revoke permissions to wallets
# @alias grant-permissions
# @arg contract! the address of the token contract
# @arg file! the path to the file containing the addresses to grant permissions to (one per line)
# @option --gas-price Override the gas price to use for the transaction.
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
grantPermissions() {
  REVOKER_ROLE="0xce3f34913921da558f105cefb578d87278debbbd073a8d552b5de0d168deee30"
  MINTER_ROLE="0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"

  while read -r address; do
    cast send --rpc-url $argc_rpc_url --private-key $ADMIN_PRIVATE_KEY \
      ${argc_gas_price:+--gas-price "$argc_gas_price"} \
      $argc_contract "grantRole(bytes32,address)" $REVOKER_ROLE $address
    cast send --rpc-url $argc_rpc_url --private-key $ADMIN_PRIVATE_KEY \
      ${argc_gas_price:+--gas-price "$argc_gas_price"} \
      $argc_contract "grantRole(bytes32,address)" $REVOKER_ROLE $address
  done <$argc_file
}

# @cmd check for mint/revoke permissions for wallets
# @alias check-permissions
# @arg contract! the address of the token contract
# @arg file! the path to the file containing the addresses to check permissions for (one per line)
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --verbose print the addresses that have the permissions
checkPermissions() {
  REVOKER_ROLE="0xce3f34913921da558f105cefb578d87278debbbd073a8d552b5de0d168deee30"
  MINTER_ROLE="0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"
  FALSE="0x0000000000000000000000000000000000000000000000000000000000000000"

  while read -r address; do
    local REVOKER="$(cast call --rpc-url $argc_rpc_url $argc_contract "hasRole(bytes32,address)" $REVOKER_ROLE $address)"
    if [ $REVOKER = $FALSE ]; then
      echo "$address does not have the revoker role"
    elif [ $argc_verbose ]; then
      echo "$address has the revoker role"
    fi

    local MINTER="$(cast call --rpc-url $argc_rpc_url $argc_contract "hasRole(bytes32,address)" $MINTER_ROLE $address)"
    if [ $REVOKER = $FALSE ]; then
      echo "$address does not have the minter role"
    elif [ $argc_verbose ]; then
      echo "$address has the minter role"
    fi
  done <$argc_file
}

# @cmd check balances of wallets
# @alias check-balances
# @arg file! the path to the file containing the addresses to check balances for (one per line)
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
checkBalances() {
  while read -r address; do
    local BALANCE="$(cast balance --rpc-url $argc_rpc_url $address)"
    echo "$address has a balance of $BALANCE"
  done <$argc_file
}

# @cmd deploy all current governor diamond facets
# @alias deploy-facets
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --ignore-deploy-warning ignore the warning about deploying all facets
deployFacets() {
  if [ $argc_ignore_deploy_warning ]; then
    forge script script/Governor.s.sol:DeployGovernorFacets \
      --broadcast --verify --rpc-url $argc_rpc_url \
      --optimize --optimizer-runs 1000000
  else
    echo
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo "!!   WARNING: This will deploy all Governor Diamond Facets   !!"
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo
    echo " Unless this is the first deploy to a given chain, you probably"
    echo " don't want to do this. Facets are shared across all governor"
    echo " diamonds, so you almost never want to deploy _all_ of them."
    echo " If you are sure you want to deploy them, re-run this command"
    echo " with the --ignore-deploy-warning flag."
    echo
  fi
}

# @cmd deploy a governor diamond (sans facets) and a timelock controller
# @alias deploy-governor
# @arg path! the path to the governor diamond config
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovernor() {
  forge script script/Governor.s.sol:DeployGovernorInstance $argc_path \
    --optimize --optimizer-runs 1000000 --sig "run(string)" \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv
}

# @cmd output test coverage data for the contracts
# @alias cov
# @flag --no-open do not open the coverage report in the browser
coverage() {
  forge coverage --report lcov
  lcov -r lcov.info "test/*" \
    -r lcov.info "script/*" "src/governor/lib/*" "src/utils/*" \
    -o lcov-filtered.info
  genhtml -o coverage/ lcov-filtered.info
  rm lcov.info lcov-filtered.info
  [ $argc_no_open ] || open coverage/index.html
}

eval $(argc "$0" "$@")
