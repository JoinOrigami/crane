# @describe Jib helps the crane hoist the cargo.
# @version 0.1.0

# TODO: add upgrade commands for the factories
# TODO: add a command to set the factory implementations
# TODO: add upgrade commands for the tokens

# @cmd deploy the governance token factory
# @alias dgtf
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
deployGovTokenFactory() {
  forge script script/Deploy.s.sol\:DeployScript \
    --rpc-url $argc_rpc_url --broadcast -vvvv --verify \
    --optimize --optimizer-runs 1000000 \
    --sig "deployGovernanceTokenFactory()"
}

# @cmd deploy the membership token factory
# @alias dmtf
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --resume attempt to resume the deployment
deployMemTokenFactory() {
  # 17,500 runs seems to be about as many as we can use in this contract and still keep the bytecode under 24kb
  forge script script/Deploy.s.sol\:DeployScript \
    --rpc-url $argc_rpc_url --broadcast -vvvv --verify \
    --optimize --optimizer-runs 17500 \
    ${argc_resume:+--resume} \
    --sig "deployMembershipTokenFactory()"
}

# @cmd deploy an instance of the governance token - PREFER CLONING WHENEVER POSSIBLE
# @option --admin! the address entitled to call admin functions on the clone
# @option --name! the name of the token
# @option --symbol! the symbol for the token
# @option --cap! the maximum supply of the token
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --ignore-deploy-warning
deployGovToken() {
  if [ $argc_ignore_deploy_warning ]; then
    forge script script/Deploy.s.sol:DeployScript \
      --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
      --optimize --optimizer-runs 1000000 \
      --sig "deployGovernanceToken(address,string,string,uint256)" \
      -- $argc_admin "$argc_name" $argc_symbol $argc_cap
  else
    echo
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo "!! WARNING: This will deploy a new Governance Token contract !!"
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo
    echo " This is much more expensive than cloning. Avoid if possible."
    echo " If you are sure you want to deploy a new token, re-run this"
    echo " command with the --ignore-deploy-warning flag."
    echo
  fi
}

# @cmd deploy an instance of the membership token - PREFER CLONING WHENEVER POSSIBLE
# @option --admin! the address entitled to call admin functions on the clone
# @option --name! the name of the token
# @option --symbol! the symbol for the token
# @option --base-uri! the base uri for the token metadata
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
# @flag --ignore-deploy-warning
deployMemToken() {
  if [ $argc_ignore_deploy_warning ]; then
    forge script script/Deploy.s.sol:DeployScript \
      --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
      --optimize --optimizer-runs 1000000 \
      --sig "deployMembershipToken(address,string,string,string)" \
      -- $argc_admin "$argc_name" $argc_symbol $argc_base_uri
  else
    echo
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo "!! WARNING: This will deploy a new Membership Token contract !!"
    echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
    echo
    echo " This is much more expensive than cloning. Avoid if possible."
    echo " If you are sure you want to deploy a new token, re-run this"
    echo " command with the --ignore-deploy-warning flag."
    echo
  fi
}

# @cmd deploy a clone of the governance token
# @alias cgt
# @arg factory! the address of the factory to deploy the clone from
# @option -a --admin! the address entitled to call admin functions on the clone
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -c --cap! the maximum supply of the token
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
cloneGovToken() {
  forge script script/Clone.s.sol:Clone \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --sig "cloneGovernanceToken(address,address,string,string,uint256)" \
    -- $argc_factory $argc_admin "$argc_name" $argc_symbol $argc_cap
}

# @cmd deploy a clone of the membership token
# @alias cmt
# @arg factory! the address of the factory to deploy the clone from
# @option -a --admin! the address entitled to call admin functions on the clone
# @option -n --name! the name of the token
# @option -s --symbol! the symbol for the token
# @option -u --base-uri! the base uri for the token metadata
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
cloneMemToken() {
  forge script script/Clone.s.sol:Clone \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --sig 'cloneMembershipToken(address,address,string,string,string)' \
    -- $argc_factory $argc_admin "$argc_name" $argc_symbol $argc_base_uri
}

# @cmd upgrade a governance token
# @alias ugt
# @arg admin! the address of the proxy admin contract for the token
# @arg token! the address of the token to upgrade
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeGovToken() {
  forge script script/Upgrade.s.sol:UpgradeScript $argc_admin $argc_token \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --sig "upgradeGovernanceToken(address,address)" \
    --optimize --optimizer-runs 1000000
}

# @cmd upgrade a membership token
# @alias umt
# @arg admin! the address of the proxy admin contract for the token
# @arg token! the address of the token to upgrade
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
upgradeMemToken() {
  forge script script/Upgrade.s.sol:UpgradeScript $argc_admin $argc_token \
    --rpc-url $argc_rpc_url --broadcast --verify -vvvv \
    --sig "upgradeMembershipToken(address,address)" \
    --optimize --optimizer-runs 17500
}

# @cmd grant permissions to wallets in the specified file (one address per line) on the specified contract necessary to mint and revoke tokens
# @alias grant-permissions
# @arg contract! the address of the token contract
# @arg file! the path to the file containing the addresses to grant permissions to
# @option --rpc-url=http://localhost:8545 The url of the RPC endpoint.
grantPermissions() {
  REVOKER_ROLE="0xce3f34913921da558f105cefb578d87278debbbd073a8d552b5de0d168deee30"
  MINTER_ROLE="0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"

  while read -r address; do
    cast send --rpc-url $argc_rpc_url --private-key $ADMIN_PRIVATE_KEY \
      $argc_contract "grantRole(bytes32,address)" $REVOKER_ROLE $address
    cast send --rpc-url $argc_rpc_url --private-key $ADMIN_PRIVATE_KEY \
      $argc_contract "grantRole(bytes32,address)" $MINTER_ROLE $address
  done <$argc_file
}

# @cmd output test coverage data for the contracts
# @alias cov
# @flag --no-open do not open the coverage report in the browser
coverage() {
  forge coverage --report lcov
  lcov -r lcov.info "test/*" \
    -r lcov.info "script/*" \
    -r lcov.info "src/versions/*" \
    -o lcov-filtered.info \
    --rc lcov_branch_coverage=1
  genhtml -o coverage/ lcov-filtered.info
  rm lcov.info lcov-filtered.info
  [ $argc_no_open ] || open coverage/index.html
}

eval $(argc "$0" "$@")
